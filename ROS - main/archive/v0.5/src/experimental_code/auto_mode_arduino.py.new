#!/usr/bin/python
import rospy
from data_service.msg import TimeData
from math import pi,sin
import time
import serial
from arduino_Interface import Controller
from maneuvers import CircularTest, DoubleLaneChange, Straight, SineSweep
import os

# open file for data collection
BASE_PATH   		= "/home/odroid/Data/"
data_file_name   	= BASE_PATH + time.strftime("%Y-%m-%d_%H-%M-%S") + '.csv'
data_file     		= open(data_file_name, 'a')
data_file.write('t_s,roll,pitch,yaw,a_x,a_y,a_z,w_x,w_y,w_z,vx_est,vy_est,X_est,Y_est,d_F,FxR,vx_enc, enc_count\n')

#############################################################
def saveData_callback(data):
	#all_data = (time.time(),) + tuple(data.value) + (d_F, FxR,vx_enc, new_enc_pos)
	#data_file.write('%.3f,%.2f,%.2f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f, %.3f, %.3f, %.3f, %d\n' % all_data)
	pass

#############################################################
def main_auto():
	# initiate node, subscribe to topic
	# set rates
    rospy.init_node('auto_mode', anonymous=True)
    rospy.Subscriber('imu_data',TimeData, saveData_callback)
    rateHz		= 50 
    rate 		= rospy.Rate(rateHz)		

	# launch arduino communication 
    tire_radius 		= 0.036*2*pi
    controller_model 	= Controller(arduino_port = '/dev/ttyUSB0', 
			  						 baudRate = 1152000, 
									 sampleRate = rateHz, 
									 radius = tire_radius)
	# serial communication hack
    os.system("/usr/bin/arduino")

    # specify tests
    test_opt    = { 0 : CircularTest,
                    1 : DoubleLaneChange,
                    2 : Straight,
		    		3 : SineSweep   }

    test_sel    = 0
    test_mode   = test_opt.get(test_sel)

    t_i         = 0
    while not rospy.is_shutdown():
        # run maneuver
        test_mode(controller_model, t_i, rateHz)

        # increment counter, and wait
        t_i += 1 
        rate.sleep()

#############################################################
if __name__ == '__main__':
    print('starting run .... ')
    try:
        main_auto()
    except rospy.ROSInterruptException:
        pass
