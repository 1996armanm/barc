<launch>
	<!-- IMU NODE -->
	<node pkg="barc" type="imu_data_acquisition.py" name="imu_node" >
		<param name="port" value="/dev/ttyACM0" />
	</node>

	<!-- ARDUINO NODE -->
	<node pkg="rosserial_python" type="serial_node.py" name="arduino_node" >
		<param name="port" value="/dev/ttyUSB0" />
	</node>

	<!-- STATE ESTIMATION NODE -->
	<node pkg="barc" type="state_estimation2.py" name="state_estimation" >
    <!-- VEHICLE PROPERTIES -->
    <!-- m      := mass of vehicle
         I_z    := moment of inertia about z-axis
         L_a    := distance from CoG to rear axel
         L_b    := distance from CoG to front axel -->
		<param name="L_a" type="double"  value="0.125" />
		<param name="L_b" type="double"  value="0.125" />
		<param name="m"   type="double"    value="1.98" />
		<param name="I_z"  type="double"   value="0.24" />

    <!-- EXTERNAL FORCES 
        Ff      := force of friction       -->
        <param name="air_drag_coeff"   type="double"   value="0.1308"/>
        <param name="Ff"   type="double"   value="0.1711"/>

    <!-- ENCODER PARAMETERS -->
		<param name="dt_vx"  type="double" value="0.2" />

    <!-- LOW PASS FILTER PARAMETER -->
        <param name="p_filter" type="double" value="0.2" />

    <!-- TIRE MODEL PARAMETERS-->
    <!-- f_paj = mu*m*g/2*sin(c*atan(b*alpha))
        assuming lumped tire model    -->
		<param name="B"   type="double" value="7.40" />
		<param name="C"  type="double" value="1.25" />
		<param name="mu"  type="double" value="0.234" />

    <!-- STATE ESTIMATION PROPERTIES -->
    <!-- Luemberger observer
        aph := estimation error dynamics turning parameter -->
		<param name="aph" type="double"  value="3.5" />

    <!-- EKF observer
        q   := standard deviation of measurement noise
        r   := standard deviation of process noise
        v_x_min   := minimum velocity before activating EKF -->
		<param name="q" type="double" value="0.1" />
		<param name="r" type="double" value="0.1" />
		<param name="v_x_min" type="double" value="0.3" />
	</node>
	

	<!-- LQR initization MANUEVER -->
	<node pkg="barc" type="controller_LQR_dummy.py" name="controller" >
            <!--  SELECTION -->
            <param name="user" value="jgon13" />
            <param name="experiment_sel" type="int" value="5" />

            <!-- PROPERTIES
            * v_x_pwm: signal for motor speed
            * steering_angle : signal for servo steering angle
            * t_exp : length of experiment
            * t_turn : time at which motor first turns
            * t_0   : after t_0 secs, begin experiment
            -->
            <param name="v_x_pwm" type="double" value="103" />
            <param name="steering_angle" type="double" value="15" />
            <param name="t_turn" type="int" value="5" />
            <param name="t_exp" type="int" value="15" />
            <param name="t_0" type="int" value="2" />
 		
         <!-- PID for straight test using imu gyro -->
           <param name="p" type="double" value="50" />
		    <param name="i" type="double" value="5" />
		    <param name="d" type="double" value="0" />
        
         <!-- LQR offsets  
            * d_f_offset : steering angle offset to add to LQR output [degrees]      
            * motor_offset : PWM offset for motor ESC unit    
          -->
		    <param name="motor_offset" type="double" value="0" />
		    <param name="motor_min" type="double" value="0" />
		    <param name="motor_max" type="double" value="10" />
		    <param name="d_f_offset" type="double" value="0" />
		    <param name="d_f_min" type="double" value="-30" />
		    <param name="d_f_max" type="double" value="30" />

		    <param name="v_LQR_min" type="double" value="0.1" />
            
   </node>

    <!-- MPC control in JUlia --> 
    
    <node pkg="barc" type="LL_ctrl.jl" name="MPC_controller" output="screen">

    </node> 




    <!-- Record the experiment data -->
    <node pkg="rosbag" type="record" name="rosbag_record"
        args=" --all" />

</launch>
