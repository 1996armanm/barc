#!/usr/bin/env python
# Shiying, Liting, ME 290J
# ---------------------------------------------------------------------------
# Licensing Information: You are free to use or extend these projects for
# education or reserach purposes provided that (1) you retain this notice
# and (2) you provide clear attribution to UC Berkeley, including a link
# to http://barc-project.com
#
# Attibution Information: The barc project ROS code-base was developed
# at UC Berkeley in the Model Predictive Control (MPC) lab by Jon Gonzales
# (jon.gonzales@berkeley.edu). The cloud services integation with ROS was developed
# by Kiet Lam  (kiet.lam@berkeley.edu). The web-server app Dator was
# based on an open source project by Bruce Wootton
# ---------------------------------------------------------------------------

import rospy
from barc.msg import ECU,Encoder
from data_service.msg import TimeData
from geometry_msgs.msg import Vector3
from math import pi,sin
import time
import serial
from numpy import zeros, hstack, cos, array, dot, arctan, sign,ones
from numpy import unwrap, float32
from input_map import angle_2_servo, servo_2_angle
from manuevers import TestSettings, CircularTest, Straight, SineSweep, DoubleLaneChange, CoastDown
from pid import PID


######### Julia code ##############


#from car_info_mpc import MPC
#
v_x_enc=0
d_f=0
n_FL_prev=0
n_FR_prev=0
t0=time.time()

def enc_callback(data):
    global v_x_enc, d_f,t0
    global n_FL, n_FR, n_FL_prev, n_FR_prev
    print "hello"
    n_FL = data.FL
    n_FR = data.FR

    # compute time elapsed
    tf = time.time()
    dt = tf - t0

    # if enough time elapse has elapsed, estimate v_x
    dt_min = 0.20
    if dt >= dt_min:
        # compute speed :  speed = distance / time
	r=0.0319
	N=4
        dx_magnets=2*pi*r/N
        v_FL = float(n_FL- n_FL_prev)*dx_magnets/dt
        v_FR = float(n_FR- n_FR_prev)*dx_magnets/dt

        # update encoder v_x, v_y measurements
        # only valid for small slip angles, still valid for drift?
        v_x_enc     = (v_FL + v_FR)/2.0*cos(d_f)
	#print v_x_enc

        # update old data
        n_FL_prev   = n_FL
        n_FR_prev   = n_FR
        t0          = time.time()

####
yaw0        = 0
read_yaw0   = False
yaw_prev    = 0
yaw         = 0
err         = 0
# def imu_callback(data):
#     global yaw0, read_yaw0, yaw_prev, yaw, err
#
#     # extract yaw angle
#     (_,_,yaw, _,_,_, _,_,_) = data.value
#
#     # save initial measurements
#     if not read_yaw0:
#         read_yaw0 = True
#         yaw0    = yaw
#     else:
# 	print "yaw before: ",yaw
#         temp        = unwrap(array([yaw_prev, yaw]))
#         yaw         = temp[1]
#         yaw_prev    = yaw
# 	print "yaw after unwarp: ", yaw


#############################################################
def main_auto():
    # initialize ROS node

    rospy.init_node('auto_mode', anonymous=True)
    nh = rospy.Publisher('ecu', ECU, queue_size = 10)

	# set node rate
    rateHz  = 50
    dt      = 1.0 / rateHz
    rate 	= rospy.Rate(rateHz)
    t_i     = 0

    rospy.Subscriber('encoder', Encoder, enc_callback)
    # rospy.Subscriber('imu',TimeData, imu_callback)
    # read the control sequence from data file u_vec 2*60, dt=0.2 and u_vec[1,:] for acceleration and 2 for steering

#     V_mpc=array([ 0.0,.04,.08,.12,.16,.2,.24,.28,.32,.36,.4,.44,.48,.52,.56,.6,.64,.68,.72,
#     .76,.8,.84,.88,.92,.96,1,1.04,1.08,1.12,1.16,1.2,1.24,1.28,1.32,1.36,1.4,1.44,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.426,1.386,1.346,1.306,1.266,1.226,1.186,1.146,1.106,1.066,1.026,.986,.946,.906,.866,.826,.786,.746,.706,.666,.626,.586,.546,.506,.466,.426,.386,.346,.306,.266,.226,.186,.146,.106,.066,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,
#     .03,.03,.03,.03,.03,.03,.03,.03,.03],dtype=float32)
#     V_mpc=array([1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.482,1.442,1.402,1.362,1.322,1.282,1.242,1.202,1.162,1.122,1.082,1.042,1.002,.962,.922,.882,.842,.802,.762,.722,.682,.642,.602,.562,.522,.482,.442,.402,.362,.322,.282,.242,.202,.162,.122,.082,.042,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,
#     .03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03],dtype=float32)
#     V_mpc=array([1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.469,1.429,1.389,1.349,1.309,1.269,1.229,1.189,1.149,1.109,1.069,1.029,.989,.949,.909,.869,.829,.789,.749,.709,.669,.629,.589,.549,.509,.469,.429,.389,.349,.309,
#     .269,.229,.189,.149,.109,.069,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,
#     .03,.03,.03,.03,.03],dtype=float32)
    V_mpc=array([0,.04,.08,.12,.16,.2,.24,.28,.32,.36,.4,.44,.48,.52,.56,.6,.64,.68,.72,.76,.8,.84,.88,.92,.96,1,1.04,1.08,1.12,1.16,1.2,1.24,1.28,1.32,1.36,1.4,1.44,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.46,1.456,1.416,1.376,1.336,1.296,1.256,1.216,1.176,1.136,1.096,1.056,1.016,.976,.936,.896,.856,.816,.776,.736,.696,.656,.616,.576,.536,.496,.456,.416,.376,.336,.296,.256,.216,.176,.136,.096,.056,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03,.03
	],dtype=float32)
    V_ramp=array(ones(10)*0.4,dtype=float32)
    #V_ramp.append(V_mpc)
    V=hstack((V_ramp,V_mpc))
    #V=V_ramp+V_mpc

    steer_zero=array(zeros(10)*(-pi/30),dtype=float32)
    steer_mpc=array([.338,.343,.347,.347,.346,.343,.337,.33,.321,.311,.353,.336,.319,.302,.285,
    .269,.254,.239,.226,.215,.243,.226,.211,.198,.186,.177,.169,.161,.154,.145,.161,.133,.1,-.153,-.403,-.524,-.524,-.524,-.524,-.394,-.156,-.107,-.074,-.05,-.034,-.024,-.016,-.011,-.008,-.005,-.065,-.045,-.031,-.021,-.014,-.01,-.007,-.005,-.003,-.002,-.029,-.02,-.014,-.009,-.006,-.004,-.003,-.002,-.001,-.001,-.015,-.01,-.007,-.005,-.004,-.003,-.003,-.004,-.006,-.01,-.005,-.004,-.004,-.004,-.005,-.007,-.013,-.027,-.098,.387,-.057,-.05,-.045,-.044,-.051,-.179,.523,-.523,-.523,.523,.522,-.522,-.522,.522,.52,-.515,.014,.014,.014,.014,.029,.029,.029,.029,.029,.029,.029,.029,.029,.029,.027,.027,.027,.027,.028,.028,.028,.028,.028,.028,.026,.026,.026,.026,.026,.026,.026,.026,
    .026,.026,.024,.024,.024,.024,.024,.024,.024,.024,.024,.024],dtype=float32)
    #steer_mpc=array(zeros(10),dtype=float32)
    #steer_zero.append(steer_mpc)
    steer_ang=hstack((steer_zero,steer_mpc))
    p=40
    i=5
    d=0
    pid     = PID(P=p, I=i, D=d)

    yaw_zero=array(zeros(10),dtype=float32)
#     yaw_mpc=array([0,0,.001,.004,.009,.014,.021,.029,.039,.049,.061,.075,.09,.106,.122,
#     .138,.155,.171,.188,.204,.221,.24,.259,.278,.296,.314,.332,.35,.367,.385,.402,.421,.438,.45,
#     .43,.373,.296,.217,.136,.055,-.004,-.027,-.043,-.053,-.061,-.066,-.069,-.072,-.073,-.074,-.075,-.085,-.091,-.096,-.099,-.101,-.102,-.103,-.104,-.104,-.105,-.109,-.112,-.114,-.115,-.116,-.117,-.117,-.117,-.118,-.118,-.12,-.121,-.122,-.123,-.124,-.124,-.124,-.125,-.126,-.127,-.127,-.128,-.128,-.128,-.129,-.13,-.131,-.133,-.14,-.112,-.116,-.119,-.122,-.124,-.126,-.135,-.111,-.133,-.152,-.135,-.12,-.133,-.143,-.135,-.129,-.133,-.133,-.133,-.133,-.133,-.132,-.132,-.132,-.132,-.132,-.132,-.132,-.132,-.132,-.132,-.132,-.131,-.131,-.131,-.131,-.131,-.131,-.131,-.131,-.131,-.131,-.131,-.131,-.13,-.13,-.13,-.13,-.13,-.13,-.13,-.13,
#     -.13,-.13,-.13,-.13,-.13,-.13,-.129,-.129],dtype=float32)
#     yaw_mpc=array([0,-.057,-.105,-.147,-.184,-.218,-.25,-.281,-.31,-.336,-.36,-.411,-.439,-.442,-.415,-.352,-.269,-.186,-.103,-.02,.063,.129,.212,.295,.378,.455,.504,.535,.551,.558,.558,.482,.425,.382,.351,.33,.321,.327,.376,.459,.541,.466,.549,.631,.714,.797,.88,.953,1.003,1.038,1.062,1.048,1.038,1.031,1.027,1.024,1.022,1.02,1.019,1.018,1.018,1.012,1.008,1.005,1.004,1.002,1.001,1.001,1,1,1,.997,.995,.994,.993,.993,.992,.992,.992,.992,.992,.99,.989,.989,.988,.988,.987,.987,.986,.985,.981,.925,.978,.927,.976,.93,.974,.932,.972,1.009,.974,1.007,1.038,1.009,1.036,1.012,.989,.969,.952,.936,.923,.934,.943,.95,.954,.956,.956,.955,.954,.953,.952,.952,.951,.95,.95,.949,.948,.947,.947,.946,.945,.945,.944,.943,.943,.942,.941,.941,.94,.939,.938,.938,.937,.937,.936,.935,.935,.934,
#     .933,.933],dtype=float32)
#     yaw_mpc=array([0,-.07,-.121,-.16,-.19,-.215,-.236,-.255,-.273,-.29,-.306,-.362,-.406,-.439,-.453,-.412,-.334,-.251,-.168,-.085,-.006,.043,.076,.098,.112,.121,.126,.128,.129,.128,.126,.161,.188,.21,.23,.249,.267,.285,.305,.326,.349,.384,.418,.453,.488,.524,.559,.589,.612,.614,.565,.482,.399,.316,.233,.15,.069,-.01,-.086,-.161,-.233,-.259,-.275,-.256,-.319,-.38,-.321,-.378,-.324,-.376,-.426,-.474,-.52,-.476,-.435,-.396,-.359,-.324,-.292,-.261,-.233,-.207,-.184,-.205,-.224,-.242,-.256,-.269,-.279,-.288,-.294,-.29,-.289,-.288,-.288,-.287,-.286,-.285,-.284,-.284,-.283,-.282,-.281,-.281,-.28,-.279,-.278,-.278,-.277,-.276,-.275,-.275,-.274,-.273,-.273,-.272,-.271,-.271,-.27,-.269,-.268,-.268,-.267,-.266,-.266,-.265,-.264,-.264,-.263,-.262,-.262,-.261,-.26,-.26,-.259,-.259,-.258,-.257,-.257,-.256,-.255,-.255,-.254,-.254,-.253,-.252,-.252,-.251,
#     -.251,-.25],dtype=float32)
    yaw_mpc=array([0,0,.002,.005,.009,.016,.023,.033,.043,.054,.066,.081,.097,.113,.129,.145,.161,.178,.194,.21,.225,.244,.263,.28,.297,.314,.331,.347,.364,.38,.396,.416,.433,.449,.429,.372,.295,.215,.135,.066,.021,.009,.001,-.003,-.005,-.006,-.005,-.004,-.002,0,.003,-.001,-.003,-.002,-.001,.002,.005,.009,.014,.019,.024,.025,.028,.033,.039,.048,.058,.071,.088,.111,.103,.073,.004,-.074,-.121,-.148,-.163,-.171,-.176,-.177,-.177,-.192,-.198,-.198,-.195,-.191,-.186,-.179,-.173,-.165,-.158,-.17,-.17,-.165,-.157,-.148,-.138,-.128,-.116,-.109,-.071,-.107,-.141,-.109,-.097,-.07,-.095,-.072,-.051,-.033,-.016,-.03,-.035,-.026,-.018,-.013,-.01,-.011,-.012,-.013,-.013,-.012,-.011,-.009,-.008,-.007,-.006,-.005,-.003,-.002,-.001,0,.002,.004,.005,.007,.009,.01,.012,.013,.015,.017,.018,.02,.022,.023,.025,.027,.028,.03
	],dtype=float32)
    yaw_des=hstack((yaw_zero,yaw_mpc))

    # main loop
    while not rospy.is_shutdown():
        # get steering wheel command
	if t_i <161:
		for i in range(160):
			#a_cmd=acc[i]
			yaw_d=yaw_des[i]
			err = 0.01*yaw_d
			print "step:",i
			print "yaw: ",yaw
			print "yaw_0: ", yaw0

			print "error",err

			yaw_u         = pid.update(err, dt)
	    #angle=steer_ang[i]
            #servoCMD=angle_2_servo(angle*180/pi)
			servoCMD=angle_2_servo(yaw_u)
			print "encoder v: ",v_x_enc
#             a0=0.1721
#             b0=0.1174
#             c0=0.6263
			a0=0.2434
			b0=0.1218
			c0=0.7415
			lmd=1 # controller coeeficient, for bandwidth
			V_cmd=V[i]
# 			if t_i>75:
# 				V_cmd=1.3
			print "V_des: ",V_cmd
	        #v_x_enc=0.9
			motorCMD=(-lmd*(v_x_enc-V_cmd)+c0*v_x_enc**2+b0)/a0+90
			ecu_cmd = ECU(motorCMD, servoCMD)
			print "motor CMD: ", motorCMD, servoCMD
			for j in range(5): # hold the command for 10*0.02=0.2, since the open loop sequence is generated with delta_t=0.2
				# there is delay between publishing and the vehicle actually execute the cmd
				t_i+=1
				nh.publish(ecu_cmd)
				rate.sleep()

    else:
		nh.publish(ECU(90,90))
		rate.sleep()
#############################################################
if __name__ == '__main__':
    try:
        main_auto()
    except rospy.ROSInterruptException:
        pass
