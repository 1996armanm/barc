#!/bin/bash

MASTER="$(hostname).local"

read_file(){
    if [ -f "$0" ]; then
	    car_num="$(cat $0)"
	    cars=$(echo $car_num | tr " " "\n")
    else
        echo "File not found" >&2
        exit 1
    fi
	for car in cars; do
	    slave="odroid_${car}.local"
	    script="ROS_MASTER_URI=http://${MASTER}:11311; ROS_IP=${slave}; exit"
	    ssh StrictHostKeyChecking=no ${slave} ${script} || echo "Could not connect to ${slave}" >&2
    done
    exit 0
}

interactive(){
    echo -n "Type a car number to connect to (type 'done' to finish): "
    read cars
    until [ $cars="done" ]; do
	    slave=odroid_${i}.local
	    script="ROS_MASTER_URI=http://${MASTER}:11311; ROS_IP=${slave}; exit"
	    ssh StrictHostKeyChecking=no ${slave} ${script} || echo "Could not connect to car $cars" >&2
	    echo -n "Type a car number to connect to (type 'done' to finish): "
	    read cars
    done 
    exit 0
}




##Main


case "$1" in
    "-h" )
	echo "
    Usage:
        Type the car numbers that would be platooning with the master as arguments.

        setup_script [ARG1, ARG2, ...]: the args correspond to the cars to connect to

        setup_script -h: prints this text, which explains the usage

        setup_script -f [FILE]: reads the platooning cars from the file that follows the flag

        setup_script -i: specifying the cars is done interactively
  "
	echo -n "Would you like to continue? (y/n): "
	read answer
	until [ $answer="y" || $answer="n" ]; do
	    echo -n "That's not a valid answer. Would you like to continue? (y/n)"
	    read answer
	done
	
	if [ $answer="y" ]; then
	    interactive
	else
	    exit 0
    fi
	;;
    "-f" )
        read_file $2
	;;
    "-i" )
		interactive
	;;
    * ) 
	for i in "$@"; do
	    slave=odroid_${i}.local
	    script="ROS_MASTER_URI=http://${MASTER}:11311; ROS_IP=${slave}; exit"
	    ssh StrictHostKeyChecking=no ${slave} ${script} || echo "Could not connect to car ${i}" >&2
	done
	;;
esac


#roscore
